* Introduction
** What is =AdaML=?
- UML tailored for Ada 2012 programming language
- A modeling language to draw UML diagrams
- An easy way to learn Ada through the use of UML and OOP concepts
- Small, extensible tool implemented on top of PlantUML

** Features
- UML tailored to use and show particular Ada language characteristics
- Coherent set of functions to design software components for Ada
- Generates high quality drawings (ps, eps) easy to embedded in other docs
- Easy to learn by example, both =AdaML= and Ada language

** What is /not/ =AdaML=?
- A model-based tool to generate Ada code
- A reverse engineering tool to draw UML diagrams from Ada code
- An interactive UML modeling or drawing tool

** Online Version
In case you want to test it immediately,

- Visit one of the several available PlantUML online servers
- Follow any of the examples below, but instead of including the local
  =AdaML.puml= file, include the URL\newline\newline
  \scriptsize{https://raw.github.com/rocher/AdaML/develop/AdaML.puml}
\newline
- Warning :: depending on the version used by the web site you can obtain
             slightly different graphical results

** Online Version - Quick start
- Open [[http://sujoyu.github.io/plantuml-previewer][plantuml-previewer]]
- Remove default lines and paste the following code:

#+begin_example
!include https://raw.github.com/rocher/AdaML/develop/AdaML.puml
begin_type("Pan_Dimensional")
  procedure("Ask_The_Question", "in out Natural")
end()

begin_package("Deep_Thought")
  function("Answer_The_Question", "", "Natural")
private()
  variable("The_Answer", "Natural", 42)
end()

depends("Pan_Dimensional", "Deep_Thought", "ask >")
#+end_example

- Press '=Shift+Enter=' to get graphical results

** Local Version
In case you want to integrate work results locally, requirements are:

- [[https://plantuml.com][=PlantUML=]] installed and working in your system
- The =AdaML= files, check [[https://github.com/rocher/AdaML][=AdaML=]] installation instructions
- Your favorite text editor, preferably with =PlantUML= support (e.g. Emacs)
- Check the list of [[http://plantuml.com/running][supported editors]]
- For better visualization and integration with \LaTeX, [[https://www.fontsquirrel.com/fonts/computer-modern][computer modern]] fonts

** Pros & Cons
- Online Version ::
\cmark Quick and easy to test\newline
\cmark Same code can be embedded in other webs, e.g. github\newline
\xmark No file saved, no backups\newline
\xmark Bitmap graphics (=png= format); fixed-size image \newline
\xmark PlantUML version may change without notice, affecting graphical results, layout, style or other incompatibilities \newline

- Local Version ::
\cmark Best graphical results to embed into other docs (=eps= format)\newline
\cmark Consistent graphical results over time, if no version changed\newline
\xmark Requires PlantUML up and running

** Document Conventions
In this document

- Entities :: are /classifiers/, in UML terminology, that correspond to Ada
              packages, types, records, arrays, subtypes, tasks and protected
              objects

- Elements :: are /features/, in UML terminology, that correspond to Ada record
              members, functions, procedures, type discriminant and other Ada
              specific characteristics (e.g, =range 1..1024=)

** OOP Support
- =AdaML= supports both OOP and non-OOP approaches to software models
- This document and examples on it use OOP concepts as much as possible

** Design Conventions
This document uses two view levels; according to the [[https://c4model.com][C4 model]]:

- Code view :: to show in detail how entity /elements/ (attributes, methods) are
               implemented and the relationship they have with other entities

- Component view :: to show /entities/ building blocks and the overall
                    relationship with other entities

In some /code views/, Ada code is included.

** Deep Thought Example
*** code                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.62
:END:
_=AdaML=_
#+begin_example
!include AdaML.puml
begin_type("Pan_Dimensional")
  procedure("Ask_The_Question", "in out Natural")
end()

begin_package("Deep_Thought")
  function("Answer_The_Question", "", "Natural")
private()
  variable("The_Answer", "Natural", 42)
end()

depends("Pan_Dimensional", "Deep_Thought")
#+end_example

*** figure                                                  :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.38
:END:
_=UML=_
#+begin_src plantuml :file fig-01-deep-thought-example.eps
!include AdaML.puml
begin_type("Pan_Dimensional")
  procedure("Ask_The_Question", "in out Natural")
end()

begin_package("Deep_Thought")
  function("Answer_The_Question", "", "Natural")
private()
  variable("The_Answer", "Natural", 42)
end()

depends("Pan_Dimensional", "Deep_Thought", "ask >")
#+end_src

#+RESULTS[7a22dc04a15ce1b7518d36e9ca62ab1251d2cf58]:
[[file:fig-01-deep-thought-example.eps]]

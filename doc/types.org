* Types
** Type Classification
Ada 2012 overall type classification\newline

#+begin_example
ELEMENTARY TYPES                 COMPOSITE TYPES
  |-- Scalar                       |-- Record
  |   |-- Discrete                 |-- Array
  |   |   |-- Integer              |-- Protected
  |   |   |   |-- Signed           '-- Task
  |   |   |   '-- Modular
  |   |   '-- Enumeration
  |   '-- Real
  |       |-- Float
  |       '-- Fixed
  |           |-- Decimal
  |           '-- Ordinary
  '-- Access
#+end_example

** Basic Types
*** code                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.55
:END:
_=AdaML=_
#+begin_example
!include AdaML.puml
type("Foo_Type")
begin_type("Bar_Type")
  function("Answer", "", "Natural")
  attribute("Baz", "Natural")
end()
#+end_example

*** figure                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
_=UML=_
#+begin_src plantuml :file fig-03-basic-types.eps
!include AdaML.puml
type("Foo_Type")
begin_type("Bar_Type")
  function("Answer", "", "Natural")
  attribute("Baz", "Natural")
end()
#+end_src

#+RESULTS[5c1d589e39dac08c16326372d2ada6331a1129b0]:
[[file:fig-03-basic-types.eps]]

*** Ada
#+begin_src ada
type Foo_Type; -- incomplete type, full declaration elsewhere
type Bar_Type is record
  Baz : Natural;
end record;
function Answer (Arg : in Bar_Type) return natural;
#+end_src

** Range Types
Use either the /range stereotype/ or the /range attribute/\newline

*** code                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.55
:END:
_=AdaML=_
#+begin_example
!include AdaML.puml
type("Dozen_Type", "range 1..12")
begin_type("Power_Type")
  range("-2_048 .. 65_536")
end()
#+end_example

*** figure                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
_=UML=_
#+begin_src plantuml :file fig-03-range-types.eps
!include AdaML.puml
type("Dozen_Type", "range 1..12")
begin_type("Power_Type")
  range("-2_048 .. 65_536")
end()
#+end_src

#+RESULTS[09ee69d76a84bbf58e9e8b3d82e38b8b95903cc1]:
[[file:fig-03-range-types.eps]]

*** Ada
#+begin_src ada :exports code
type Dozen_Type is range 1 .. 12;
type Power_Type is range -2_048 .. 65_536;
#+end_src

** Modular Types
*** code                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.65
:END:
_=AdaML=_
#+begin_example
!include AdaML.puml
begin_type("Mod_Type")
  mod("2 ** 10")
  procedure("Add_Integer", "in Integer")
end()
#+end_example

*** figure                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.35
:END:
_=UML=_
#+begin_src plantuml :file fig-03-modular-types.eps
!include AdaML.puml
begin_type("Mod_Type")
  mod("2 ** 10")
  procedure("Add_Integer", "in Integer")
end()
#+end_src

#+RESULTS[42d0b89e1728445ebf9a19a879813b200093e6ac]:
[[file:fig-03-modular-types.eps]]

*** Ada
#+begin_src ada :exports code
type Mod_Type is mod 2 ** 10;  --  range 0 .. 1023
procedure Add_Integer (Self : in out Mod_Type; Value : in Integer);
#+end_src

** Enumeration Types
*** code                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
_=AdaML=_
#+begin_example
!include AdaML.puml
begin_enumeration("Week_Days")
  enum("Mon, Tue, Wed, Thu, Fri, Sat, Sun")
  function("Day_Of_Week", "", "Week_Days")
end()
#+end_example

*** figure                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
_=UML=_
#+begin_src plantuml :file fig-03-enumeration-types.eps
!include AdaML.puml
begin_enumeration("Week_Days")
  enum("Mon, Tue, Wed, Thu, Fri, Sat, Sun")
  function("Day_Of_Week", "", "Week_Days")
end()
#+end_src

#+RESULTS[1e6de9e659710a72e5e64d64cf803032149e6516]:
[[file:fig-03-enumeration-types.eps]]

*** Ada
#+begin_src ada :export code
type Week_Days is (Mon, Tue, Wed, Thu, Fri, Sat, Sun);
function Day_Of_Week return Week_Days;
#+end_src

** Derived Types
*** code                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.55
:END:
_=AdaML=_
#+begin_example
!include AdaML.puml
type_new("Integer", "Foo_Type")
begin_type_new("Integer", "Bar_Type")
  range("-1 .. 20")
end()
#+end_example

*** figure                                                    :BMCOL:B_block:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
_=UML=_
#+begin_src plantuml :file fig-03-derived-types.eps
!include AdaML.puml
type_new("Integer", "Foo_Type")
begin_type_new("Integer", "Bar_Type")
  range("-1 .. 20")
end()
#+end_src

#+RESULTS[147bd8dbffd80fd6a841223975d65db61fea4101]:
[[file:fig-03-derived-types.eps]]

*** Ada
#+begin_src ada :exports code
type Foo_Type is new Integer;
type Bar_Type is new Integer range -1 .. 20;
-- or simply
type Bar_Type is range -1 .. 20;
#+end_src

** Config                                                         :noexport:
Local Variables:
org-confirm-babel-evaluate: nil
End:
